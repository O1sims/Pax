import numpy as np
import pandas as pd
import networkx as nx


_author_ = 'Owen Sims (sims.owen@gmail.com)'


"""
A set of functions that analyse how `close` cyber assets are to vulnerabilities.
Closeness is defined by the number of hops. Assigns a score accordingly.
"""


class DirectVulnerabilities:
    def __init__(self, network_data):
        """
        Initialise the class by assigning the network data to some object.
        """
        self.node_list_df = pd.DataFrame(network_data['nodes'], columns = ['id', 'name', 'type'])
        self.arc_list_df = pd.DataFrame(network_data['edges'], columns = ['source', 'target', 'type'])


    def get_all_vulnerabilities(self):
        software_vulnerabilities = self.get_all_software_vulnerabilies()

        all_vulnerabilities = {}
        for i in range(len(self.node_list_df)):
            asset_id = self.node_list_df['id'][i]
            if self.node_list_df['type'][i] == 'Software':
                vulnerabilities = software_vulnerabilities[asset_id]

                all_vulnerabilities.update({
                asset_id : vulnerabilities
                })

            elif self.node_list_df['type'][i] == 'Device':
                device_softwares = self.get_device_software(device_id = asset_id)

                vulnerabilities = []
                for j in device_softwares:
                    vulnerabilities.extend(software_vulnerabilities[j])

                all_vulnerabilities.update({
                asset_id : vulnerabilities
                })

            else:
                all_vulnerabilities.update({
                asset_id : []
                })

        return all_vulnerabilities


    def get_all_software_vulnerabilies(self):
        software_vulnerabilities = {}

        software_nodes = self.node_list_df[self.node_list_df['type'] == 'Software']
        vulnerability_nodes = self.node_list_df[self.node_list_df['type'] == 'SoftwareVulnerability'][['id', 'name']]
        software_vuln_edges = self.arc_list_df[self.arc_list_df['type'] == 'SoftwareVulnerabilityEdge']

        for i in software_nodes['id']:
            software = {
            'software_id' : i,
            'software_name': software_nodes[software_nodes['id'] == i]['name'].values[0]
            }

            vulnerability_names = []
            vulnerability_ids = list(software_vuln_edges[software_vuln_edges['source'] == i]['target'])

            for j in vulnerability_ids:
                vulnerability_name = vulnerability_nodes[vulnerability_nodes['id'] == j]['name'].values[0]
                vulnerability_names.append({
                'vulnerability_id' : j,
                'vulnerability_name' : vulnerability_name
                })

            software_vulnerabilities.update({
            i : vulnerability_names
            })

        return software_vulnerabilities


    def get_device_software(self, device_id):
        software_edges = self.arc_list_df[self.arc_list_df['type'] == 'SoftwareEdge']
        device_software_edges = software_edges[software_edges['source'] == device_id]
        softwares = list(device_software_edges['target'])

        return softwares



class VulnerabilityCloseness:
    def __init__(self):
        """
        Initialise the class by assigning the network data to some object.
        """
        self.node_list_df = pd.DataFrame(network_data['nodes'], columns = ['id', 'name', 'type'])
        self.arc_list_df = pd.DataFrame(network_data['edges'], columns = ['source', 'target', 'type'])


class CVIAssetVulnerabilities:
    def __init__(self, cvi_data):
        self.asset_list_df = pd.DataFrame(cvi_data['assets'])
        self.vulnerability_list_df = pd.DataFrame(cvi_data['vulnerabilities'])

    def get_asset_vulnerabilities(self):
        vulnerabilities = dict()
        for i in range(len(self.asset_list_df)):
            vulnerabilities[i] = list()
            for j in range(len(self.vulnerability_list_df)):
                if self.asset_list_df['assetId'][i] in self.vulnerability_list_df['assets'][j]:
                    d = dict()
                    a = self.vulnerability_list_df.iloc[[j]].to_dict(orient='dict')
                    for k in list(self.vulnerability_list_df):
                        if k != 'assets':
                            d.update({
                                k: a[k][j]
                            })

                    vulnerabilities[i].append(d)

        return vulnerabilities
